#<AdxTL>@(#)0.0.0.0 $Revision$
#########################################################################################
Subprog YCHECK_USER(YUSERNAME, YRESPONSE)

  Value Char YUSERNAME
  Variable Clbfile YRESPONSE

  Gosub GET_CONSTANTS From YUTILS
  Gosub GET_WS_CONSTANTS From YUTILS

  Local File YAX3MUSER [YAX3MU]

  Columns [F:YAX3MU](PASSWORDHASH,PASSWORDSALT)
  Read [F:YAX3MU]YAX3MU0=YUSERNAME

  Clbfile RESPONSE(0)
  If rowcount([F:YAX3MU]) > 0
    RESPONSE = func YJSONSERIALIZE.GET_INT("statusCode", SUCCESS, 0)
    RESPONSE += func YJSONSERIALIZE.GET_STR("message", "Utente trovato!", 0)
    Local Char USER_DATA(250)(3)
    USER_DATA(0) = func YJSONSERIALIZE.GET_STR("username", YUSERNAME, 1)
    USER_DATA(1) = func YJSONSERIALIZE.GET_STR("passwordHash", [F:YAX3MU]PASSWORDHASH, 1)
    USER_DATA(2) = func YJSONSERIALIZE.GET_STR("passwordSalt", [F:YAX3MU]PASSWORDSALT, 1)
    RESPONSE += func YJSONSERIALIZE.GET_STROBJ("data", USER_DATA, 0, 1)
  Else
    RESPONSE = func YJSONSERIALIZE.GET_INT("statusCode", NOT_FOUND, 0)
    RESPONSE += func YJSONSERIALIZE.GET_STR("message", "Utente inesistente!", 1)
  Endif

  YRESPONSE = func YJSONSERIALIZE.GET_JSON(RESPONSE)

End

#########################################################################################

Subprog YCHECK_REFRESH_TOKEN(YUSERNAME, YREFRESHTOKEN, YRESPONSE)
  Value Char YUSERNAME
  Value Char YREFRESHTOKEN
  Variable Clbfile YRESPONSE

  Gosub GET_CONSTANTS From YUTILS
  Gosub GET_WS_CONSTANTS From YUTILS

  Local Char REFRESHTOKEN_QUERY(250)
  #"select APIKEY_0, RTEXPIRACY_0, RT_VALID_0 from YAX3ATOKEN where APIKEY_0 = '" + YAPIKEY + "' and REFRESHTOKEN_0 = '" + YREFRESHTOKEN + "'"
  REFRESHTOKEN_QUERY = "select USERNAME_0, RTEXPIRACY_0, RT_VALID_0 from YAX3MUSERTOK where USERNAME_0 = '" + YUSERNAME + "' and REFRESHTOKEN_0 = '" + YREFRESHTOKEN + "'"

  Local Tinyint IS_INVALIDTOKEN
  Local File YAX3MUSERTOK [YAX3MUT]

  For (Char YCURR_USERNAME, Datetime YCURR_RTEXPIRACY, Tinyint YCURR_RTVALID) From num$(GTYPDBA*2+1) Sql REFRESHTOKEN_QUERY As [YAX3A]
    IS_INVALIDTOKEN = func YUTILS.IIF(YCURR_USERNAME = AVOID.ACHAR, 2, 1)
    IS_RTEXPIRED = func YUTILS.IIF((YCURR_RTEXPIRACY < func YUTILS.YDATETIME_NOW()) | (YCURR_RTVALID = FALSE), 2, 1)
  Next

  Clbfile RESPONSE(0)
  If IS_INVALIDTOKEN = TRUE | IS_RTEXPIRED = TRUE
    RESPONSE = func YJSONSERIALIZE.GET_INT("statusCode", UNAUTHORIZED, 0)
    RESPONSE += func YJSONSERIALIZE.GET_STR("message", "Refresh token non valido o scaduto!", 1)
  Else
    #AGGIORNA IL TOKEN DI AGGIORNAMENTO COME NON PIU' VALIDO
    Local Char INV_RT_QUERY(250)
    INV_RT_QUERY = "update YAX3MUSERTOK set RT_VALID_0 = " + num$(FALSE) + " where USERNAME_0 = '" + YUSERNAME + "' and REFRESHTOKEN_0 = '" + YREFRESHTOKEN + "'"

    Trbegin [YAX3MUT]

    Execsql From num$(GTYPDBA*2+1) Sql INV_RT_QUERY
    If !fstat Then
      Commit
    Else
      Rollback
    Endif

    RESPONSE = func YJSONSERIALIZE.GET_INT("statusCode", SUCCESS, 1)
  Endif
  YRESPONSE = func YJSONSERIALIZE.GET_JSON(RESPONSE)

End

#########################################################################################

Subprog YCHECK_ACCESS_TOKEN(YACCESSTOKEN, YRESPONSE)
  Value Clbfile YACCESSTOKEN
  Variable Clbfile YRESPONSE

  Gosub GET_CONSTANTS From YUTILS
  Gosub GET_WS_CONSTANTS From YUTILS

  Local Clbfile ACCESSTOKEN_QUERY_CLB(2)
  ACCESSTOKEN_QUERY_CLB = "select USERNAME_0, ATEXPIRACY_0 from YAX3MUSERTOK where ACCESSTOKEN_0 = '" + YACCESSTOKEN + "' and AT_VALID_0 = " + num$(TRUE)

  Local Char ACCESSTOKEN_QUERY(250)(3)
  Call YCLB2STRARR(ACCESSTOKEN_QUERY_CLB, ACCESSTOKEN_QUERY) From YUTILS

  Local Tinyint IS_INVALIDTOKEN, IS_EXPIREDTOKEN

  For (Char YCURR_USERNAME, Datetime YCURR_ATEXPIRACY) From num$(GTYPDBA*2+1) Sql ACCESSTOKEN_QUERY As [YAX3A]
    # con questo controllo che non ci sia più o non sia più valido l'access token
    IS_INVALIDTOKEN = func YUTILS.IIF(YCURR_USERNAME = AVOID.ACHAR, 2, 1)
    IS_EXPIREDTOKEN = func YUTILS.IIF((YCURR_ATEXPIRACY < func YUTILS.YDATETIME_NOW()), 2, 1)
  Next

  Clbfile RESPONSE(0)
  If IS_INVALIDTOKEN = TRUE
    RESPONSE = func YJSONSERIALIZE.GET_INT("statusCode", UNAUTHORIZED, 0)
    RESPONSE += func YJSONSERIALIZE.GET_STR("message", "Token di accesso non valido o revocato!", 1)
  Elsif IS_EXPIREDTOKEN = TRUE
    RESPONSE = func YJSONSERIALIZE.GET_INT("statusCode", UNAUTHORIZED, 0)
    RESPONSE += func YJSONSERIALIZE.GET_STR("message", "Token di accesso scaduto!", 1)
  Else
    RESPONSE = func YJSONSERIALIZE.GET_INT("statusCode", SUCCESS, 1)
  Endif

  YRESPONSE = func YJSONSERIALIZE.GET_JSON(RESPONSE)

End

#########################################################################################

Subprog YINS_TOKEN(YUSERNAME, YACCESSTOKEN, YACCESSTOKEN_EXPIRACY, YAT_VALID, YREFRESHTOKEN, YREFRESHTOKEN_EXPIRACY, YRT_VALID, YRESPONSE)
  Value Char YUSERNAME
  Value Clbfile YACCESSTOKEN
  Value Char YACCESSTOKEN_EXPIRACY
  Value Integer YAT_VALID
  Value Clbfile YREFRESHTOKEN
  Value Char YREFRESHTOKEN_EXPIRACY
  Value Integer YRT_VALID
  Variable Clbfile YRESPONSE

  Local File YAX3MUSERTOK [YAX3MUT]

  Trbegin [YAX3MUT]

  [F:YAX3MUT]USERNAME = YUSERNAME
  [F:YAX3MUT]ACCESSTOKEN = YACCESSTOKEN
  [F:YAX3MUT]ATEXPIRACY = gdatetime$(YACCESSTOKEN_EXPIRACY)
  [F:YAX3MUT]AT_VALID = YAT_VALID
  [F:YAX3MUT]REFRESHTOKEN = YREFRESHTOKEN
  [F:YAX3MUT]RTEXPIRACY = gdatetime$(YREFRESHTOKEN_EXPIRACY)
  [F:YAX3MUT]RT_VALID = YRT_VALID
  [F:YAX3MUT]CREUSR = "AX3A"
  [F:YAX3MUT]UPDUSR = "AX3A"

  Write [YAX3MUT]

  If !fstat Then
    Commit
  Else
    Rollback
  Endif

  Gosub JSON_RESPONSE_BUILDER From YUTILS

End

#########################################################################################

Subprog YINV_TOKEN(YACCESSTOKEN, YRESPONSE)
  Value Clbfile YACCESSTOKEN
  Variable Clbfile YRESPONSE

  Gosub GET_CONSTANTS From YUTILS
  Gosub GET_WS_CONSTANTS From YUTILS

  Local Clbfile ACCESSTOKEN_QUERY_CLB(0), TOKEN_QUERY_CLB(0)
  Local Char ACCESSTOKEN_QUERY(250)(3), TOKEN_QUERY(250)(3)

  Setlob ACCESSTOKEN_QUERY_CLB With "select count(*) from YAX3MUSERTOK where ACCESSTOKEN_0 = '" + YACCESSTOKEN + "' and AT_VALID_0 = " + num$(TRUE)
  Call YCLB2STRARR(ACCESSTOKEN_QUERY_CLB, ACCESSTOKEN_QUERY) From YUTILS

  Local Tinyint IS_INVALIDTOKEN
  Local File YAX3MUSERTOK [YAX3MUT]

  For (Integer YCOUNT_USERTOK) From num$(GTYPDBA*2+1) Sql ACCESSTOKEN_QUERY As [YAX3A]
    If YCOUNT_USERTOK > 0
      TOKEN_QUERY_CLB = "update YAX3MUSERTOK set AT_VALID_0 = 1, RT_VALID_0 = 1, UPDDATTIM_0 = GETUTCDATE() where ACCESSTOKEN_0 = '" + YACCESSTOKEN + "'"
      Call YCLB2STRARR(TOKEN_QUERY_CLB, TOKEN_QUERY) From YUTILS

      Trbegin [YAX3MUT]
      Execsql From num$(GTYPDBA*2+1) Sql TOKEN_QUERY

      If !fstat Then
        Commit
      Else
        Rollback
      Endif
    Else
      fstat = 0 #lo setto uguale a 0 perchè se il token non esiste è già stato invalidato e restituisco success
    Endif
  Next

  Gosub JSON_RESPONSE_BUILDER From YUTILS

End
